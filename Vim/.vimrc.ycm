set nocompatible              " required
" Koristi vim-plug umjesto Vundle
call plug#begin('~/.vim/plugged')

" === Navigacija i struktura koda ===
Plug 'preservim/nerdtree' " File explorer unutar Vima
Plug 'majutsushi/tagbar' " Prikazuje strukturu klase/funkcija (ctags)

" === Sintaksno isticanje i linting ===
Plug 'lepture/vim-jinja' " Podrška za Jinja2 templating
Plug 'dense-analysis/ale' " Asinkroni linter i fixer
Plug 'sheerun/vim-polyglot' " Sintaksna podrška za više jezika

" === Automatsko zatvaranje tagova i zagrada ===
Plug 'alvan/vim-closetag' " Automatsko zatvaranje HTML/XML tagova
Plug 'jiangmiao/auto-pairs' " Automatsko zatvaranje zagrada i navodnika

" === Poboljšanja za Vim interfejs ===
Plug 'vim-airline/vim-airline' " Napredna statusna traka
Plug 'vim-airline/vim-airline-themes' " Tematski dodaci za airline
Plug 'cocopon/iceberg.vim' " Iceberg tema
Plug 'ryanoasis/vim-devicons' " Dodaje ikone u NERDTree i Vim

" === Formatiranje i automatsko sređivanje koda ===
Plug 'prettier/vim-prettier' " Automatski formatira JS/TS/CSS kod

" === Web development ===
Plug 'ap/vim-css-color' " Prikazuje stvarne boje u CSS/HTML kodu
Plug 'wolandark/vim-live-server.git' " Pokreće live server unutar Vim-a
Plug 'mattn/emmet-vim' " Omogućava brzo HTML/CSS pisanje pomoću Emmet-a
Plug 'leafOfTree/vim-vue-plugin' " Poboljšana podrška za Vue.js

" === Backend development ===
Plug 'ycm-core/YouCompleteMe' " Automatska nadopuna koda
Plug 'nvie/vim-flake8' " Provjera Python koda s flake8
Plug 'jmcantrell/vim-virtualenv' " Omogućava rad s Python virtualnim okruženjima
Plug 'fatih/vim-go' " Poboljšana podrška za Go jezik
Plug 'bfrg/vim-cpp-modern' " Poboljšano sintaksno isticanje za moderni C++

" === Markdown i dokumentacija ===
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' } " Live pregled Markdowna

" === Alati i pretraga ===
Plug 'junegunn/fzf.vim' " Brza pretraga datoteka i buffera
Plug 'nicwest/vim-http' " Slanje HTTP zahtjeva iz Vim-a
Plug 'francoiscabrol/ranger.vim' " Terminalski file manager unutar Vim-a
Plug 'tpope/vim-fugitive' " Napredna Git integracija

call plug#end()

" === Instalacija pluginova ===
" 
"curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" Nakon spremanja instalacije , u Vim-u pokreni :PlugInstall



" set colorscheme
set background=dark
set termguicolors
colorscheme iceberg
" set transparent background
hi NonText ctermbg=none
hi Normal guibg=NONE ctermbg=NONE
" show line numbers
" hybrid line numbers
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

" set tabs to have 4 spaces
set ts=4

" indent when moving to the next line while writing code
set autoindent

" intelligent indentation for C
set smartindent

" Search down in subolders
" Provides tab-completion for all file-related tasks
" fuzzyfind
set path+=**

" Display all matching files when tabcomplete
set wildmenu


" expand tabs into spaces
set expandtab

" when using the >> or << commands, shift lines by 4 spaces
set shiftwidth=4

" show a visual line under the cursor's current line and column
set cursorline
set cursorcolumn

" show the matching part of the pair for [] {} and ()
set showmatch

" boilerplate for vue files(snippet)
nnoremap vue, :-1read $HOME/.vim/.boilerplate.vue<CR>5jwe4l



" omnicomplete
" autocmd FileType vue set omnifunc=syntaxcomplete#Complete

 function! s:setCompeteFunc()
   if searchpair('<script', '', '</script>', 'bnW')
     setlocal omnifunc=javascriptcomplete#CompleteJS
   elseif searchpair('<style', '', '</style>', 'bnW')
     setlocal omnifunc=csscomplete#CompleteCSS
   elseif searchpair('<template', '', '</template>', 'bnW')
     setlocal omnifunc=htmlcomplete#CompleteTags
   endif
 endfunction

 augroup vueBinds
   au!
   au CursorMoved,CursorMovedI *.vue call s:setCompeteFunc()
 augroup END
"
" enable all Python syntax highlighting features
let python_highlight_all = 1

" no preview window but popup for YCM
let g:ycm_add_preview_to_completeopt = "popup"
let g:ycm_autoclose_preview_window_after_completion = 1

"airline tabs
let g:airline#extensions#tabline#enabled = 1

" vim VUE plugin config
let g:vim_vue_plugin_config = {
      \'syntax': {
      \   'template': ['html'],
      \   'script': ['javascript'],
      \   'style': ['css'],
      \},
      \'full_syntax': [],
      \'initial_indent': [],
      \'attribute': 1,
      \'keyword': 1,
      \'foldexpr': 0,
      \'debug': 0,
      \}
" === ALE linting i auto-fix setup ===

" Automatsko otkrivanje virtualnih okruženja za Python
let b:ale_python_auto_virtualenv = 1

" Postavljanje fixera za različite jezike
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'], 
      \ 'python': ['black', 'isort'],                      
      \ 'javascript': ['prettier', 'eslint'],             
      \ 'css': ['prettier'],                              
      \ 'html': ['prettier', 'html-beautify'],            
      \ 'cpp': ['clang-format'],                         
      \ 'vue': ['prettier', 'eslint']                    
      \ }

" Omogućavanje automatskog popravljanja prilikom spremanja
let g:ale_fix_on_save = 1

" === ALE specifične postavke ===

" Postavljanje putanje do Black-a, isort-a i drugih alata ako koristiš virtualno okruženje
let g:ale_python_black_executable = 'black'
let g:ale_python_isort_executable = 'isort'

" Postavljanje dodatnih opcija za Prettier
let g:ale_javascript_prettier_options = '--single-quote --tab-width 2'

" Postavljanje dodatnih opcija za ESLint
let g:ale_javascript_eslint_options = '--fix'

" Automatsko prikazivanje linija s greškama u linterima
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_on_save = 1

" redefine the trigger key
let g:user_emmet_leader_key=','
" file browser
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <C-t> :TagbarToggle<CR>

" no backup files
set nobackup       "no backup files
set nowritebackup  "only in case you don't want a backup file while editing
set noswapfile     "no swap files

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" closetag filetypes
let g:closetag_filetypes = 'html,xhtml,htmx,vue'


" Python
autocmd filetype python nnoremap <F5> <Esc>:w<CR>:! clear;python %<CR>

" Javascript
autocmd filetype javascript nnoremap <F5> <Esc>:w<CR>:! clear;node %<CR>
"autocmd filetype javascript setlocal shiftwidth=2 tabstop=2

"Cpp
autocmd filetype cpp nnoremap <F5> <Esc>:w<CR>:! clear;g++ % -o %< &&./%< <CR>

"Start-Stop LiveServer
nmap <F2> :StartBrowserSync <CR>
nmap <F3> :KillBrowserSync <CR>
